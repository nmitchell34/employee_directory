{"version":3,"sources":["containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","sortFlip","employees","searchName","handleInputChange","event","target","value","name","setState","handleFormSubmit","preventDefault","currentSearchName","filteredEmployees","filter","employee","employee_name","toLowerCase","includes","sortEmployeesByAge","sortedEmployees","sort","a","b","dob","age","Axios","get","then","result","data","results","forEach","o","i","key","first","last","console","log","className","type","id","placeholder","aria-label","onChange","this","onClick","scope","map","location","country","email","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2ac478d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n// Class is defined for whole project essentially.\r\n// State added, sortFlip will allow user to sort by asc or desc in Age column.\r\nclass Home extends Component {\r\n  state = {\r\n    sortFlip: true,\r\n    employees: [],\r\n    searchName: \"\",\r\n  };\r\n  //   At start, random individuals are generated from this axios call.\r\n  // A key (id) is added and the employees first and last name is combined for later use.\r\n  componentDidMount() {\r\n    Axios.get(\"https://randomuser.me/api/?results=50\").then((result) => {\r\n      const employees = result.data.results;\r\n      employees.forEach((o, i) => (o.key = i + 1));\r\n      employees.forEach(\r\n        (o, i) => (o.employee_name = o.name.first + \" \" + o.name.last)\r\n      );\r\n      this.setState({ employees: employees });\r\n      console.log(this.state.employees);\r\n    });\r\n  }\r\n  // on change of the search bar, the searchName state is updated.\r\n  handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      searchName: value,\r\n    });\r\n  };\r\n\r\n  // On submit of the employee name input, the employees array is filtered by\r\n  //   name to see if it includes what the user input to the search bar.\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const currentSearchName = this.state.searchName;\r\n    const filteredEmployees = this.state.employees.filter((employee) =>\r\n      employee.employee_name\r\n        .toLowerCase()\r\n        .includes(currentSearchName.toLowerCase())\r\n    );\r\n    this.setState({\r\n      employees: filteredEmployees,\r\n    });\r\n  };\r\n  // sort employees by age checks the state of sortFlip and will sort by asc or desc depending on that.\r\n  sortEmployeesByAge = () => {\r\n    function sortAsc(a, b) {\r\n      if (a.dob.age > b.dob.age) return 1;\r\n      if (b.dob.age > a.dob.age) return -1;\r\n\r\n      return 0;\r\n    }\r\n    function sortDesc(a, b) {\r\n      if (a.dob.age > b.dob.age) return -1;\r\n      if (b.dob.age > a.dob.age) return 1;\r\n\r\n      return 0;\r\n    }\r\n    if (this.state.sortFlip) {\r\n      const sortedEmployees = this.state.employees.sort(sortAsc);\r\n      // console.log(sortedEmployees);\r\n      this.setState({\r\n        employees: sortedEmployees,\r\n        sortFlip: false,\r\n      });\r\n    } else {\r\n      const sortedEmployees = this.state.employees.sort(sortDesc);\r\n      // console.log(sortedEmployees);\r\n      this.setState({\r\n        employees: sortedEmployees,\r\n        sortFlip: true,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light justify-content-between\">\r\n            <span className=\"navbar-brand\">Employee Directory</span>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n              <input\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"search\"\r\n                id=\"searchBtn\"\r\n                placeholder=\"Employee Name\"\r\n                aria-label=\"Search\"\r\n                onChange={this.handleInputChange}\r\n              />\r\n              <button\r\n                className=\"btn btn-outline-success my-2 my-sm-0 float-right\"\r\n                type=\"submit\"\r\n                onClick={this.handleFormSubmit}\r\n              >\r\n                Search By Name\r\n              </button>\r\n            </form>\r\n          </nav>\r\n          <br />\r\n          <br />\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <table className=\"table table-striped\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">ID</th>\r\n                    <th scope=\"col\">Employee Name</th>\r\n                    <th scope=\"col\">City</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">\r\n                      <button\r\n                        className=\"btn btn-light\"\r\n                        onClick={() => {\r\n                          this.sortEmployeesByAge();\r\n                        }}\r\n                      >\r\n                        Age\r\n                      </button>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.employees.map((employee) => (\r\n                    <tr>\r\n                      <th scope=\"row\">{employee.key}</th>\r\n                      <td>{employee.employee_name}</td>\r\n                      <td>{employee.location.country}</td>\r\n                      <td>{employee.email}</td>\r\n                      <td>{employee.dob.age}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./containers/Home\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}